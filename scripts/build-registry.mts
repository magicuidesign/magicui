import { exec } from "child_process";
import { promises as fs } from "fs";
import path from "path";
import { rimraf } from "rimraf";
import { registryItemSchema, type Registry } from "shadcn/schema";
import { z } from "zod";

import { examples } from "../registry/registry-examples";
import { lib } from "../registry/registry-lib";
import { ui } from "../registry/registry-ui";
import { siteConfig } from "../config/site";

const DEPRECATED_ITEMS = ["toast"];

const registry = {
  name: "magicui",
  homepage: "https://magicui.design",
  items: z.array(registryItemSchema).parse(
    [
      {
        name: "index",
        type: "registry:style",
        dependencies: [
          "tw-animate-css",
          "class-variance-authority",
          "lucide-react",
        ],
        registryDependencies: ["utils"],
        cssVars: {},
        files: [],
      },
      ...ui,
      ...examples,
      ...lib,
    ].filter((item) => {
      return !DEPRECATED_ITEMS.includes(item.name);
    })
  ),
} satisfies Registry;

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    const resolveFiles = item.files?.map((file) => `${file.path}`);
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path
      ? `@/${item.files[0].path}`
      : "";

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `${typeof file === "string" ? file : file.path}`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "__registry__/index.tsx"));
  await fs.writeFile(path.join(process.cwd(), "__registry__/index.tsx"), index);
}

async function buildRegistryJsonFile() {
  // 1. Fix the path for registry items.
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item) => {
      const files = item.files?.map((file) => {
        return {
          ...file,
          path: `${file.path}`,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  // 2. Write the content of the registry to `registry.json` and public folder
  rimraf.sync(path.join(process.cwd(), `registry.json`));
  rimraf.sync(path.join(process.cwd(), `public/registry.json`));

  const registryJson = JSON.stringify(fixedRegistry, null, 2);

  await fs.writeFile(path.join(process.cwd(), `registry.json`), registryJson);
  await fs.writeFile(
    path.join(process.cwd(), `public/registry.json`),
    registryJson
  );
}

type RegistryItem = Registry["items"][number];

type FileEntry = string | { path: string; type?: string; target?: string };

async function readRegistryFilesContents(item: RegistryItem): Promise<string> {
  if (!item.files?.length) return "";

  const paths = item.files
    .map((f: FileEntry) => (typeof f === "string" ? f : f?.path))
    .filter(Boolean)
    .sort() as string[];

  // Read all files in parallel
  const contents = await Promise.all(
    paths.map(async (filePath) => {
      try {
        const content = await fs.readFile(
          path.join(process.cwd(), filePath),
          "utf8"
        );
        return `--- file: ${filePath} ---\n${content.endsWith("\n") ? content : content + "\n"}`;
      } catch {
        return null; // Skip missing files
      }
    })
  );

  // Join non-null contents with blank lines between them
  return contents.filter(Boolean).join("\n");
}

function getComponentExamples() {
  const examplesByComponent = new Map<string, string[]>();

  examples.forEach((example) => {
    example.registryDependencies?.forEach((dep) => {
      const componentName = dep.split("/").pop();
      if (componentName) {
        if (!examplesByComponent.has(componentName)) {
          examplesByComponent.set(componentName, []);
        }
        examplesByComponent.get(componentName)!.push(example.name);
      }
    });
  });

  return examplesByComponent;
}

async function generateLlmsContent() {
  const components = ui
    .filter((item) => item.type === "registry:ui")
    .sort((a, b) => a.name.localeCompare(b.name))
    .map((component) => {
      const title = (component as any).title || component.name;
      const description =
        (component as any).description || `The ${title} component.`;
      return `- [${title}](${siteConfig.url}/docs/components/${component.name}): ${description}`;
    });

  const exampleSet = new Set<string>();
  const examplesList = examples
    .filter((example) => {
      if (exampleSet.has(example.name)) return false;
      exampleSet.add(example.name);
      return true;
    })
    .map((example) => {
      const title = (example as any).title || example.name;
      const firstFile = example.files?.[0]?.path || "";
      const url = firstFile
        ? `${siteConfig.links.github}/blob/main/${firstFile}`
        : siteConfig.links.github;
      return `- [${title}](${url}): Example usage`;
    });

  return [
    `# ${siteConfig.name}`,
    "",
    `> ${siteConfig.description}`,
    "",
    "This file provides LLM-friendly entry points to documentation and examples.",
    "",
    "## Components",
    "",
    ...components,
    "",
    "## Examples",
    "",
    ...examplesList,
    "",
    "## Optional",
    "",
    `- [Repository](${siteConfig.links.github}): Source code and issues`,
    `- [Sitemap](${siteConfig.url}/sitemap.xml): Indexable pages`,
  ].join("\n");
}

async function generateLlmsFullContent(
  examplesByComponent: Map<string, string[]>
) {
  const components = ui
    .filter((item) => item.type === "registry:ui")
    .sort((a, b) => a.name.localeCompare(b.name));

  const componentContents = await Promise.all(
    components.map(async (component) => {
      const title = (component as any).title || component.name;
      const description =
        (component as any).description || `The ${title} component.`;

      let content = [
        `===== COMPONENT: ${component.name} =====`,
        `Title: ${title}`,
        `Description: ${description}`,
        "",
        await readRegistryFilesContents(component as unknown as RegistryItem),
      ].join("\n");

      // Add examples for this component
      const relatedExamples = examplesByComponent.get(component.name) || [];
      for (const exampleName of relatedExamples) {
        const example = examples.find((e) => e.name === exampleName);
        if (example) {
          const exTitle = (example as any).title || example.name;
          content += [
            "",
            "",
            `===== EXAMPLE: ${exampleName} =====`,
            `Title: ${exTitle}`,
            "",
            await readRegistryFilesContents(example as unknown as RegistryItem),
          ].join("\n");
        }
      }

      return content;
    })
  );

  return componentContents.join("\n\n\n");
}

async function buildLlmsFiles() {
  const examplesByComponent = getComponentExamples();

  const [minContent, fullContent] = await Promise.all([
    generateLlmsContent(),
    generateLlmsFullContent(examplesByComponent),
  ]);

  const publicDir = path.join(process.cwd(), "public");
  await fs.mkdir(publicDir, { recursive: true });

  await Promise.all([
    fs.writeFile(path.join(publicDir, "llms.txt"), minContent, "utf8"),
    fs.writeFile(path.join(publicDir, "llms-full.txt"), fullContent, "utf8"),
  ]);
}

async function buildRegistry() {
  return new Promise((resolve, reject) => {
    const process = exec(`pnpm shadcn:build`);

    process.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });
}

try {
  console.log("ÔøΩÔøΩÔ∏è Building registry/__index__.tsx...");
  await buildRegistryIndex();
  console.log("‚úÖ Registry index built successfully");

  console.log("üíÖ Building registry.json...");
  await buildRegistryJsonFile();
  console.log("‚úÖ Registry JSON file built successfully");

  console.log("üß† Building llms files...");
  await buildLlmsFiles();
  console.log("‚úÖ llms-min.txt and llms.txt built successfully");

  console.log("üèóÔ∏è Building registry...");
  await buildRegistry();
  console.log("‚úÖ Registry build completed");
} catch (error) {
  console.error("‚ùå Build failed with error:");
  console.error(error);
  if (error instanceof Error) {
    console.error("Error stack:", error.stack);
  }
  process.exit(1);
}
