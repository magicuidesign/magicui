{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "magic-card",
  "type": "registry:ui",
  "title": "Magic Card",
  "description": "A spotlight effect that follows your mouse cursor and highlights borders on hover.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/magic-card.tsx",
      "content": "\"use client\";\n\nimport { motion, useMotionTemplate, useMotionValue } from \"motion/react\";\nimport React, { useCallback, useEffect } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface MagicCardProps {\n  children?: React.ReactNode;\n  className?: string;\n  gradientSize?: number;\n  gradientColor?: string;\n  gradientOpacity?: number;\n  gradientFrom?: string;\n  gradientTo?: string;\n}\n\nexport function MagicCard({\n  children,\n  className,\n  gradientSize = 200,\n  gradientColor = \"#262626\",\n  gradientOpacity = 0.8,\n  gradientFrom = \"#9E7AFF\",\n  gradientTo = \"#FE8BBB\",\n}: MagicCardProps) {\n  const mouseX = useMotionValue(-gradientSize);\n  const mouseY = useMotionValue(-gradientSize);\n  const reset = useCallback(() => {\n    mouseX.set(-gradientSize);\n    mouseY.set(-gradientSize);\n  }, [gradientSize, mouseX, mouseY]);\n\n  const handlePointerMove = useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      const rect = e.currentTarget.getBoundingClientRect();\n      mouseX.set(e.clientX - rect.left);\n      mouseY.set(e.clientY - rect.top);\n    },\n    [mouseX, mouseY],\n  );\n\n  useEffect(() => {\n    reset();\n  }, [reset]);\n\n  useEffect(() => {\n    const handleGlobalPointerOut = (e: PointerEvent) => {\n      if (!e.relatedTarget) {\n        reset();\n      }\n    };\n\n    const handleVisibility = () => {\n      if (document.visibilityState !== \"visible\") {\n        reset();\n      }\n    };\n\n    window.addEventListener(\"pointerout\", handleGlobalPointerOut);\n    window.addEventListener(\"blur\", reset);\n    document.addEventListener(\"visibilitychange\", handleVisibility);\n\n    return () => {\n      window.removeEventListener(\"pointerout\", handleGlobalPointerOut);\n      window.removeEventListener(\"blur\", reset);\n      document.removeEventListener(\"visibilitychange\", handleVisibility);\n    };\n  }, [reset]);\n\n  return (\n    <div\n      className={cn(\"group relative rounded-[inherit]\", className)}\n      onPointerMove={handlePointerMove}\n      onPointerLeave={reset}\n      onPointerEnter={reset}\n    >\n      <motion.div\n        className=\"pointer-events-none absolute inset-0 rounded-[inherit] bg-border duration-300 group-hover:opacity-100\"\n        style={{\n          background: useMotionTemplate`\n          radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px,\n          ${gradientFrom}, \n          ${gradientTo}, \n          var(--border) 100%\n          )\n          `,\n        }}\n      />\n      <div className=\"absolute inset-px rounded-[inherit] bg-background\" />\n      <motion.div\n        className=\"pointer-events-none absolute inset-px rounded-[inherit] opacity-0 transition-opacity duration-300 group-hover:opacity-100\"\n        style={{\n          background: useMotionTemplate`\n            radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px, ${gradientColor}, transparent 100%)\n          `,\n          opacity: gradientOpacity,\n        }}\n      />\n      <div className=\"relative\">{children}</div>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}