{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-grid-pattern",
  "type": "registry:ui",
  "title": "Animated Grid Pattern",
  "description": "A animated background grid pattern made with SVGs, fully customizable using Tailwind CSS.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/animated-grid-pattern.tsx",
      "content": "\"use client\"\n\nimport {\n  ComponentPropsWithoutRef,\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from \"react\"\n\n// Use native SVG <animate> for per-rect opacity animation (lighter than framer-motion)\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface AnimatedGridPatternProps\n  extends ComponentPropsWithoutRef<\"svg\"> {\n  width?: number\n  height?: number\n  x?: number\n  y?: number\n  strokeDasharray?: number\n  numSquares?: number\n  maxOpacity?: number\n  duration?: number\n  repeatDelay?: number\n}\n\nexport function AnimatedGridPattern({\n  width = 40,\n  height = 40,\n  x = -1,\n  y = -1,\n  strokeDasharray = 0,\n  numSquares = 50,\n  className,\n  maxOpacity = 0.5,\n  duration = 4,\n  ...props\n}: AnimatedGridPatternProps) {\n  const id = useId()\n  const containerRef = useRef<SVGSVGElement | null>(null)\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })\n\n  const getPos = useCallback(() => {\n    return [\n      Math.floor((Math.random() * dimensions.width) / width),\n      Math.floor((Math.random() * dimensions.height) / height),\n    ]\n  }, [dimensions, width, height])\n\n  const generateSquares = useCallback(\n    (count: number) =>\n      Array.from({ length: count }, (_, i) => ({\n        id: i,\n        pos: getPos(),\n      })),\n    [getPos]\n  )\n\n  const [squares, setSquares] = useState(() => generateSquares(numSquares))\n\n  useEffect(() => {\n    if (dimensions.width && dimensions.height) {\n      setSquares(generateSquares(numSquares))\n    }\n  }, [dimensions, numSquares, generateSquares])\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        setDimensions({\n          width: entry.contentRect.width,\n          height: entry.contentRect.height,\n        })\n      }\n    })\n\n    const node = containerRef.current\n    if (node) resizeObserver.observe(node)\n    return () => {\n      // Disconnect the observer to fully release resources and avoid stale references\n      resizeObserver.disconnect()\n    }\n  }, [])\n\n  return (\n    <svg\n      ref={containerRef}\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n        className\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path\n            d={`M.5 ${height}V.5H${width}`}\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n          />\n        </pattern>\n      </defs>\n\n      {/* background grid */}\n      <rect width=\"100%\" height=\"100%\" fill={`url(#${id})`} />\n\n      {/* animated squares */}\n      <g transform={`translate(${x}, ${y})`}>\n        {squares.map(({ pos: [px, py] }, index) => (\n          <rect\n            key={index}\n            width={width - 1}\n            height={height - 1}\n            x={px * width + 1}\n            y={py * height + 1}\n            fill=\"currentColor\"\n            strokeWidth=\"0\"\n            opacity={0}\n          >\n            {/* Use native SVG animation for opacity. This is much lighter than\n                mounting many JS-driven animation nodes (framer-motion) and\n                keeps animation on the compositor where possible. */}\n            <animate\n              attributeName=\"opacity\"\n              values={`0;${maxOpacity};0`}\n              dur={`${duration}s`}\n              begin={`${(index * 0.1).toFixed(2)}s`}\n              repeatCount=\"indefinite\"\n            />\n          </rect>\n        ))}\n      </g>\n    </svg>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}