{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-theme-toggler",
  "type": "registry:ui",
  "title": "Theme Toggler",
  "description": "A component for theme changing animation.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/magicui/animated-theme-toggler.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { flushSync } from \"react-dom\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AnimatedThemeTogglerProps\n  extends React.ComponentPropsWithoutRef<\"button\"> {\n  duration?: number\n}\n\nexport const AnimatedThemeToggler = ({\n  className,\n  duration = 400,\n  ...props\n}: AnimatedThemeTogglerProps) => {\n  const [isDark, setIsDark] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  useEffect(() => {\n    const updateTheme = () => {\n      setIsDark(document.documentElement.classList.contains(\"dark\"))\n    }\n\n    updateTheme()\n\n    const observer = new MutationObserver(updateTheme)\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    })\n\n    return () => observer.disconnect()\n  }, [])\n\n  const toggleTheme = useCallback(async () => {\n    if (!buttonRef.current) return\n\n    await document.startViewTransition(() => {\n      flushSync(() => {\n        const newTheme = !isDark\n        setIsDark(newTheme)\n        document.documentElement.classList.toggle(\"dark\")\n        localStorage.setItem(\"theme\", newTheme ? \"dark\" : \"light\")\n      })\n    }).ready\n\n    const { top, left, width, height } =\n      buttonRef.current.getBoundingClientRect()\n    const x = left + width / 2\n    const y = top + height / 2\n    const maxRadius = Math.hypot(\n      Math.max(left, window.innerWidth - left),\n      Math.max(top, window.innerHeight - top)\n    )\n\n    document.documentElement.animate(\n      {\n        clipPath: [\n          `circle(0px at ${x}px ${y}px)`,\n          `circle(${maxRadius}px at ${x}px ${y}px)`,\n        ],\n      },\n      {\n        duration,\n        easing: \"ease-in-out\",\n        pseudoElement: \"::view-transition-new(root)\",\n      }\n    )\n  }, [isDark, duration])\n\n  return (\n    <button\n      ref={buttonRef}\n      onClick={toggleTheme}\n      className={cn(className)}\n      {...props}\n    >\n      {isDark ? <Sun /> : <Moon />}\n      <span className=\"sr-only\">Toggle theme</span>\n    </button>\n  )\n}\n",
      "type": "registry:ui"
    }
  ],
  "css": {
    "::view-transition-old(root), ::view-transition-new(root)": {
      "animation": "none",
      "mix-blend-mode": "normal"
    }
  }
}