{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-theme-toggler",
  "type": "registry:ui",
  "title": "Theme Toggler",
  "description": "A component for theme changing animation.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/magicui/animated-theme-toggler.tsx",
      "content": "\"use client\";\n\nimport { Moon, Sun } from \"lucide-react\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { flushSync } from \"react-dom\";\nimport { cn } from \"@/lib/utils\";\n\ntype Props = {\n  className?: string;\n};\n\nexport const AnimatedThemeToggler = ({ className }: Props) => {\n  const [isDark, setIsDark] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    const updateTheme = () => {\n      setIsDark(document.documentElement.classList.contains(\"dark\"));\n    };\n\n    updateTheme();\n\n    const observer = new MutationObserver(updateTheme);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  const toggleTheme = useCallback(async () => {\n    if (!buttonRef.current) return;\n\n    await document.startViewTransition(() => {\n      flushSync(() => {\n        const newTheme = !isDark;\n        setIsDark(newTheme);\n        document.documentElement.classList.toggle(\"dark\");\n        localStorage.setItem(\"theme\", newTheme ? \"dark\" : \"light\");\n      });\n    }).ready;\n\n    const { top, left, width, height } =\n      buttonRef.current.getBoundingClientRect();\n    const x = left + width / 2;\n    const y = top + height / 2;\n    const maxRadius = Math.hypot(\n      Math.max(left, window.innerWidth - left),\n      Math.max(top, window.innerHeight - top),\n    );\n\n    document.documentElement.animate(\n      {\n        clipPath: [\n          `circle(0px at ${x}px ${y}px)`,\n          `circle(${maxRadius}px at ${x}px ${y}px)`,\n        ],\n      },\n      {\n        duration: 700,\n        easing: \"ease-in-out\",\n        pseudoElement: \"::view-transition-new(root)\",\n      },\n    );\n  }, [isDark]);\n\n  return (\n    <button ref={buttonRef} onClick={toggleTheme} className={cn(className)}>\n      {isDark ? <Sun /> : <Moon />}\n    </button>\n  );\n};\n",
      "type": "registry:ui"
    }
  ],
  "css": {
    "::view-transition-old(root), ::view-transition-new(root)": {
      "animation": "none",
      "mix-blend-mode": "normal"
    }
  }
}