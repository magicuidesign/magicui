{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "grid-beams",
  "type": "registry:ui",
  "title": "Grid Beams",
  "description": "A dynamic grid background with animated light beams rays and grid patterns.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/grid-beams.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"motion/react\";\nimport React, { HTMLAttributes, useMemo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nconst createGridMask = (start: number, end: number): string => {\n  const mid = (start + end) / 2;\n  return `linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.05) ${start}%, rgba(0,0,0,0.2) ${mid}%, rgba(0,0,0,0.6) ${end - 20}%, rgba(0,0,0,1) ${end}%)`;\n};\n\nconst generateRayConfig = (index: number, total: number) => {\n  const progress = index / Math.max(total - 1, 1);\n  const leftPercent = 2 + progress * 96;\n  const rotation = 28 - progress * 56;\n  const variation = (index * 0.618) % 1;\n\n  return {\n    left: `${leftPercent}%`,\n    rotation,\n    width: 40 + variation * 25,\n    duration: 6 + variation * 5,\n    delay: -variation * 10,\n    swayDuration: 12 + variation * 9,\n    swayDelay: -variation * 10,\n    blur: 24 + variation * 9,\n    strongSway: index % 2 === 0,\n  };\n};\n\ninterface GridBeamsProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  gridSize?: number;\n  gridColor?: string;\n  rayCount?: number;\n  rayOpacity?: number;\n  raySpeed?: number;\n  rayLength?: string;\n  gridFadeStart?: number;\n  gridFadeEnd?: number;\n  backgroundColor?: string;\n}\n\ninterface LightRayProps {\n  left: string;\n  rotation: number;\n  width: number;\n  delay: number;\n  duration: number;\n  swayDuration: number;\n  swayDelay: number;\n  blurAmount: number;\n  isStrongerSway: boolean;\n  opacity: number;\n  speed: number;\n  length: string;\n}\n\nconst LightRay = React.memo<LightRayProps>(\n  ({\n    left,\n    rotation,\n    width,\n    delay,\n    duration,\n    swayDuration,\n    swayDelay,\n    blurAmount,\n    isStrongerSway,\n    opacity,\n    speed,\n    length,\n  }) => {\n    return (\n      <motion.div\n        className=\"absolute pointer-events-none -top-[5%] left-[var(--ray-left)] w-[var(--ray-width)] h-[var(--ray-height)] origin-top mix-blend-screen bg-[linear-gradient(to_bottom,rgba(200,220,255,var(--ray-opacity)),rgba(200,220,255,0))] blur-[var(--ray-blur)] translate-x-[-50%] rotate-[var(--ray-rotation)]\"\n        style={\n          {\n            \"--ray-left\": left,\n            \"--ray-width\": `${width}px`,\n            \"--ray-height\": length,\n            \"--ray-opacity\": opacity,\n            \"--ray-blur\": `${blurAmount}px`,\n            \"--ray-rotation\": `${rotation}deg`,\n          } as React.CSSProperties\n        }\n        animate={{\n          opacity: [0.3, 0.7, 0.3],\n          transform: [\n            `translateX(-50%) rotate(${rotation}deg)`,\n            `translateX(-50%) rotate(${rotation + (isStrongerSway ? 1 : 0.5)}deg)`,\n            `translateX(-50%) rotate(${rotation}deg)`,\n          ],\n        }}\n        transition={{\n          opacity: {\n            duration: duration / speed,\n            delay: delay / speed,\n            repeat: Infinity,\n            ease: \"easeInOut\",\n          },\n          transform: {\n            duration: swayDuration / speed,\n            delay: swayDelay / speed,\n            repeat: Infinity,\n            ease: \"easeInOut\",\n          },\n        }}\n      />\n    );\n  },\n);\n\nexport const GridBeams: React.FC<GridBeamsProps> = ({\n  children,\n  className,\n  gridSize = 40,\n  gridColor = \"rgba(200, 220, 255, 0.2)\",\n  rayCount = 15,\n  rayOpacity = 0.35,\n  raySpeed = 1,\n  rayLength = \"45vh\",\n  gridFadeStart = 30,\n  gridFadeEnd = 90,\n  backgroundColor = \"#020412\",\n  ...props\n}) => {\n  const rayConfigs = useMemo(() => {\n    return Array.from({ length: rayCount }, (_, i) =>\n      generateRayConfig(i, rayCount),\n    );\n  }, [rayCount]);\n\n  const gridMask = useMemo(\n    () => createGridMask(gridFadeStart, gridFadeEnd),\n    [gridFadeStart, gridFadeEnd],\n  );\n\n  return (\n    <div\n      className={cn(\n        \"relative overflow-hidden bg-[var(--bg-color)] bg-[radial-gradient(ellipse_at_50%_-20%,#1a2c5a,transparent_70%)]\",\n        className,\n      )}\n      style={\n        {\n          \"--bg-color\": backgroundColor,\n        } as React.CSSProperties\n      }\n      {...props}\n    >\n      <div\n        className=\"absolute inset-0 pointer-events-none bg-[linear-gradient(var(--grid-color)_1px,transparent_1px),linear-gradient(90deg,var(--grid-color)_1px,transparent_1px)] bg-size-[var(--grid-size)_var(--grid-size)] [mask-image:var(--grid-mask)] [webkit-mask-image:var(--grid-mask)]\"\n        style={\n          {\n            \"--grid-color\": gridColor,\n            \"--grid-size\": `${gridSize}px`,\n            \"--grid-mask\": gridMask,\n          } as React.CSSProperties\n        }\n      />\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {rayConfigs.map((config, index) => (\n          <LightRay\n            key={index}\n            left={config.left}\n            rotation={config.rotation}\n            width={config.width}\n            delay={config.delay}\n            duration={config.duration}\n            swayDuration={config.swayDuration}\n            swayDelay={config.swayDelay}\n            blurAmount={config.blur}\n            isStrongerSway={config.strongSway}\n            opacity={rayOpacity}\n            speed={raySpeed}\n            length={rayLength}\n          />\n        ))}\n      </div>\n\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n};\n",
      "type": "registry:ui"
    }
  ]
}