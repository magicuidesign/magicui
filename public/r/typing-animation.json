{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typing-animation",
  "type": "registry:ui",
  "title": "Typing Animation",
  "description": "Characters appearing in typed animation",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/typing-animation.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, MotionProps, useInView } from \"motion/react\";\nimport { useEffect, useRef, useState } from \"react\";\n\ninterface TypingAnimationProps extends MotionProps {\n  children: string;\n  className?: string;\n  duration?: number;\n  delay?: number;\n  as?: React.ElementType;\n  startOnView?: boolean;\n}\n\nexport function TypingAnimation({\n  children,\n  className,\n  duration = 100,\n  delay = 0,\n  as: Component = \"div\",\n  startOnView = false,\n  ...props\n}: TypingAnimationProps) {\n  const MotionComponent = motion.create(Component, {\n    forwardMotionProps: true,\n  });\n\n  const [displayedText, setDisplayedText] = useState<string>(\"\");\n  const [started, setStarted] = useState(false);\n  const elementRef = useRef<HTMLElement | null>(null);\n  const isInView = useInView(elementRef as React.RefObject<Element>, {\n    amount: 0.3,\n    once: true,\n  });\n\n  useEffect(() => {\n    if (!startOnView) {\n      const startTimeout = setTimeout(() => {\n        setStarted(true);\n      }, delay);\n      return () => clearTimeout(startTimeout);\n    }\n\n    if (!isInView) return;\n\n    const startTimeout = setTimeout(() => {\n      setStarted(true);\n    }, delay);\n\n    return () => clearTimeout(startTimeout);\n  }, [delay, startOnView, isInView]);\n\n  useEffect(() => {\n    if (!started) return;\n\n    const graphemes = Array.from(children);\n    let i = 0;\n    const typingEffect = setInterval(() => {\n      if (i < graphemes.length) {\n        setDisplayedText(graphemes.slice(0, i + 1).join(\"\"));\n        i++;\n      } else {\n        clearInterval(typingEffect);\n      }\n    }, duration);\n\n    return () => {\n      clearInterval(typingEffect);\n    };\n  }, [children, duration, started]);\n\n  return (\n    <MotionComponent\n      ref={elementRef}\n      className={cn(\n        \"text-4xl font-bold leading-[5rem] tracking-[-0.02em]\",\n        className,\n      )}\n      {...props}\n    >\n      {displayedText}\n    </MotionComponent>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}