{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "aurora-text",
  "type": "registry:ui",
  "title": "Aurora Text",
  "description": "A beautiful aurora text effect",
  "files": [
    {
      "path": "registry/magicui/aurora-text.tsx",
      "content": "\"use client\";\n\nimport type { CSSProperties } from \"react\";\nimport React, { useEffect, useRef } from \"react\";\n\ninterface AuroraTextProps {\n  children: React.ReactNode;\n  className?: string;\n  colors?: string[];\n  speed?: number; // 1 is default speed, 2 is twice as fast, 0.5 is half speed\n}\n\nexport function AuroraText({\n  children,\n  className = \"\",\n  colors = [\"#FF0080\", \"#7928CA\", \"#0070F3\", \"#38bdf8\", \"#a855f7\", \"#2dd4bf\"],\n  speed = 1,\n}: AuroraTextProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const textRef = useRef<SVGTextElement>(null);\n  const containerRef = useRef<HTMLSpanElement>(null);\n  const [fontSize, setFontSize] = React.useState(0);\n  const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 });\n  const [isReady, setIsReady] = React.useState(false);\n  const [textStyle, setTextStyle] = React.useState<\n    Partial<CSSStyleDeclaration>\n  >({});\n\n  // Updated effect to compute all text styles from parent\n  useEffect(() => {\n    if (containerRef.current) {\n      const computedStyle = window.getComputedStyle(containerRef.current);\n\n      // Extract text-related styles\n      const relevantStyles = {\n        fontSize: computedStyle.fontSize,\n        fontFamily: computedStyle.fontFamily,\n        fontWeight: computedStyle.fontWeight,\n        fontStyle: computedStyle.fontStyle,\n        letterSpacing: computedStyle.letterSpacing,\n        lineHeight: computedStyle.lineHeight,\n        textTransform: computedStyle.textTransform,\n        fontVariant: computedStyle.fontVariant,\n        fontStretch: computedStyle.fontStretch,\n        fontFeatureSettings: computedStyle.fontFeatureSettings,\n      };\n\n      requestAnimationFrame(() => {\n        setTextStyle(relevantStyles);\n      });\n    }\n  }, [className]);\n\n  // Updated effect to compute font size from both inline and class styles\n  useEffect(() => {\n    const updateFontSize = () => {\n      if (containerRef.current) {\n        const computedStyle = window.getComputedStyle(containerRef.current);\n        const computedFontSize = parseFloat(computedStyle.fontSize);\n\n        requestAnimationFrame(() => {\n          setFontSize(computedFontSize);\n        });\n      }\n    };\n\n    updateFontSize();\n    window.addEventListener(\"resize\", updateFontSize);\n\n    return () => window.removeEventListener(\"resize\", updateFontSize);\n  }, [className]);\n\n  // Update effect to set ready state after dimensions are computed\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (textRef.current) {\n        const bbox = textRef.current.getBBox();\n        setDimensions({\n          width: bbox.width,\n          height: bbox.height,\n        });\n        setIsReady(true);\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n\n    return () => window.removeEventListener(\"resize\", updateDimensions);\n  }, [children, fontSize]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    let time = 0;\n    const baseSpeed = 0.008; // Original speed as base unit\n\n    function animate() {\n      if (!ctx || !canvas) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      time += baseSpeed * speed;\n\n      colors.forEach((color, i) => {\n        const x =\n          canvas.width *\n          (0.5 +\n            Math.cos(time * 0.8 + i * 1.3) * 0.4 +\n            Math.sin(time * 0.5 + i * 0.7) * 0.2);\n        const y =\n          canvas.height *\n          (0.5 +\n            Math.sin(time * 0.7 + i * 1.5) * 0.4 +\n            Math.cos(time * 0.6 + i * 0.8) * 0.2);\n\n        const gradient = ctx.createRadialGradient(\n          x,\n          y,\n          0,\n          x,\n          y,\n          canvas.width * 0.4,\n        );\n\n        gradient.addColorStop(0, `${color}99`);\n        gradient.addColorStop(0.5, `${color}33`);\n        gradient.addColorStop(1, \"#00000000\");\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      });\n\n      requestAnimationFrame(animate);\n    }\n    animate();\n  }, [dimensions, colors, speed]);\n\n  return (\n    <span\n      ref={containerRef}\n      className={`relative inline-block align-middle ${className}`}\n      style={{\n        width: dimensions.width || \"auto\",\n        height: dimensions.height || \"auto\",\n      }}\n    >\n      {/* Hidden text for SEO */}\n      <span className=\"sr-only\">{children}</span>\n\n      {/* Visual placeholder while canvas loads */}\n      <span\n        style={{\n          opacity: isReady ? 0 : 1,\n          transition: \"opacity 0.2s ease-in\",\n          position: isReady ? \"absolute\" : \"relative\",\n          display: \"inline-block\",\n          whiteSpace: \"nowrap\",\n        }}\n        aria-hidden=\"true\"\n      >\n        {children}\n      </span>\n\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          opacity: isReady ? 1 : 0,\n          transition: \"opacity 0.2s ease-in\",\n        }}\n        aria-hidden=\"true\"\n      >\n        <svg\n          width={dimensions.width}\n          height={dimensions.height}\n          className=\"absolute inset-0\"\n        >\n          <defs>\n            <mask id={`text-mask-${children}`}>\n              <rect width=\"100%\" height=\"100%\" fill=\"black\" />\n              <text\n                ref={textRef}\n                x=\"50%\"\n                y=\"50%\"\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                fill=\"white\"\n                style={textStyle as CSSProperties}\n              >\n                {children}\n              </text>\n            </mask>\n          </defs>\n        </svg>\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            maskImage: `url(#text-mask-${children})`,\n            WebkitMaskImage: `url(#text-mask-${children})`,\n          }}\n          className=\"h-full w-full\"\n        />\n      </div>\n    </span>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/magicui/aurora-text.tsx"
    }
  ]
}