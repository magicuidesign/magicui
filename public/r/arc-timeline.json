{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "arc-timeline",
  "type": "registry:ui",
  "title": "Arc Timeline",
  "description": "A curved timeline that elegantly visualizes key milestones, perfect for Web3 and AI roadmaps.",
  "files": [
    {
      "path": "registry/magicui/arc-timeline.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { ComponentPropsWithoutRef, ReactNode, useState } from \"react\";\n\nexport interface ArcTimelineItem {\n  time: ReactNode;\n  steps: Array<{\n    icon: ReactNode;\n    content: ReactNode;\n  }>;\n}\ninterface ArcTimelineProps extends ComponentPropsWithoutRef<\"div\"> {\n  /**\n   * Optional CSS class name to apply custom styles\n   */\n  className?: string;\n  /**\n   * The data of the arc timeline\n   */\n  data: ArcTimelineItem[];\n  /**\n   * The configuration of the arc timeline\n   */\n  arcConfig?: {\n    /**\n     * The width of the circle, default is 5000\n     */\n    circleWidth?: number;\n    /**\n     * The angle between minor steps, default is 0.35\n     */\n    angleBetweenMinorSteps?: number;\n    /**\n     * The number of lines to fill between steps, default is 10\n     */\n    lineCountFillBetweenSteps?: number;\n    /**\n     * The number of lines to fill in before the first step and after the last step\n     */\n    boundaryPlaceholderLinesCount?: number;\n  };\n  /**\n   * The default active step\n   */\n  defaultActiveStep?: {\n    /**\n     * The time of the default active step\n     */\n    time?: string;\n    /**\n     * The index of the default active step\n     */\n    stepIndex?: number;\n  };\n}\n\nexport function ArcTimeline(props: ArcTimelineProps) {\n  const {\n    className,\n    children,\n    data,\n    arcConfig = {},\n    defaultActiveStep = {},\n    ...restProps\n  } = props;\n\n  const {\n    circleWidth = 5000,\n    angleBetweenMinorSteps = 0.35,\n    lineCountFillBetweenSteps = 10,\n    boundaryPlaceholderLinesCount = 50,\n  } = arcConfig;\n\n  const {\n    time: defaultActiveTime = data[0].time,\n    stepIndex: defaultActiveStepIndex = 0,\n  } = defaultActiveStep || {};\n\n  const [circleContainerRotateDeg, setCircleContainerRotateDeg] = useState(\n    () => {\n      let count = 0;\n      for (const timelineItem of data) {\n        if (timelineItem.time === defaultActiveTime) {\n          count += defaultActiveStepIndex;\n          break;\n        } else {\n          count += timelineItem.steps.length;\n        }\n      }\n      return (\n        -1 * count * angleBetweenMinorSteps * (lineCountFillBetweenSteps + 1) -\n        angleBetweenMinorSteps * boundaryPlaceholderLinesCount\n      );\n    }\n  );\n\n  return (\n    <div\n      {...restProps}\n      className={cn(\"relative h-[380px] w-full overflow-hidden\", className)}\n    >\n      <div\n        style={{\n          transform: `translateX(-50%) rotate(${circleContainerRotateDeg}deg)`,\n          width: `${circleWidth}px`,\n        }}\n        className=\"absolute left-1/2 top-28 aspect-square origin-center rounded-full transition-all duration-500 ease-in-out\"\n      >\n        {data.map((line, lineIndex) => {\n          return (\n            <div key={`${lineIndex}`}>\n              {line.steps.map((step, stepIndex) => {\n                // calc the angle of the step\n                const angle =\n                  angleBetweenMinorSteps *\n                    (lineCountFillBetweenSteps + 1) *\n                    (data\n                      .slice(0, lineIndex)\n                      .map((item) => item.steps.length)\n                      .reduce((prev, current) => prev + current, 0) +\n                      stepIndex) +\n                  angleBetweenMinorSteps * boundaryPlaceholderLinesCount;\n                const isLastStep =\n                  lineIndex === data.length - 1 &&\n                  stepIndex === line.steps.length - 1;\n                const isFirstStep = lineIndex === 0 && stepIndex === 0;\n                // check if the step is active\n                const isActive =\n                  Math.abs(angle + circleContainerRotateDeg) < 0.01;\n                return (\n                  <div key={`${lineIndex}-${stepIndex}`}>\n                    {/* placeholder lines before the first step */}\n                    {isFirstStep && (\n                      <PlaceholderLines\n                        isFirstStep={true}\n                        isLastStep={false}\n                        angle={angle}\n                        angleBetweenMinorSteps={angleBetweenMinorSteps}\n                        lineCountFillBetweenSteps={lineCountFillBetweenSteps}\n                        boundaryPlaceholderLinesCount={\n                          boundaryPlaceholderLinesCount\n                        }\n                        lineIndex={lineIndex}\n                        stepIndex={stepIndex}\n                        circleWidth={circleWidth}\n                        circleContainerRotateDeg={circleContainerRotateDeg}\n                      />\n                    )}\n                    <div\n                      className={cn(\n                        \"absolute left-1/2 top-0 -translate-x-1/2 cursor-pointer transition-all duration-200\",\n                        isActive ? \"h-[120px] w-[2px]\" : \"h-16 w-[1.5px]\"\n                      )}\n                      style={{\n                        transformOrigin: `50% ${circleWidth / 2}px`,\n                        transform: `rotate(${angle}deg)`,\n                      }}\n                      onClick={() => {\n                        setCircleContainerRotateDeg(-1 * angle);\n                      }}\n                    >\n                      <div\n                        className={cn(\n                          \"h-full w-full transition-colors duration-200\",\n                          isActive\n                            ? \"bg-[var(--step-line-active-color,#888888)] dark:bg-[var(--step-line-active-color,#9780ff)]\"\n                            : \"bg-[var(--step-line-inactive-color,#b1b1b1)] dark:bg-[var(--step-line-inactive-color,#737373)]\"\n                        )}\n                        style={{\n                          transformOrigin: \"center top\",\n                          transform: `rotate(${\n                            -1 * angle - circleContainerRotateDeg\n                          }deg)`,\n                        }}\n                      >\n                        <div\n                          className={cn(\n                            \"absolute bottom-0 left-1/2 aspect-square -translate-x-1/2\",\n                            isActive\n                              ? \"translate-y-[calc(100%_+_14px)] scale-[1.2] text-[var(--icon-active-color,#555555)] dark:text-[var(--icon-active-color,#d4d4d4)]\"\n                              : \"translate-y-[calc(100%_+_4px)] scale-100 text-[var(--icon-inactive-color,#a3a3a3)] dark:text-[var(--icon-inactive-color,#a3a3a3)]\"\n                          )}\n                        >\n                          {step.icon}\n                        </div>\n                        <p\n                          className={cn(\n                            \"absolute bottom-0 left-1/2 line-clamp-3 flex w-[240px] -translate-x-1/2 translate-y-[calc(100%_+_42px)] items-center justify-center text-center text-sm transition-opacity duration-300 ease-in\",\n                            \"text-[var(--description-color,#555555)] dark:text-[var(--description-color,#d4d4d4)]\",\n                            isActive ? \"opacity-100\" : \"opacity-0\"\n                          )}\n                        >\n                          {step.content}\n                        </p>\n                      </div>\n                      {stepIndex === 0 && (\n                        <div\n                          className={cn(\n                            \"absolute left-1/2 top-0 z-10 -translate-x-1/2 translate-y-[calc(-100%-24px)] whitespace-nowrap\",\n                            isActive\n                              ? \"text-[var(--time-active-color,#555555)] dark:text-[var(--time-active-color,#d4d4d4)]\"\n                              : \"text-[var(--time-inactive-color,#a3a3a3)] dark:text-[var(--time-inactive-color,#a3a3a3)]\"\n                          )}\n                        >\n                          {line.time}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* fill lines between steps, in the last step, fill the placeholder lines */}\n                    <PlaceholderLines\n                      isFirstStep={false}\n                      isLastStep={isLastStep}\n                      angle={angle}\n                      angleBetweenMinorSteps={angleBetweenMinorSteps}\n                      lineCountFillBetweenSteps={lineCountFillBetweenSteps}\n                      boundaryPlaceholderLinesCount={\n                        boundaryPlaceholderLinesCount\n                      }\n                      lineIndex={lineIndex}\n                      stepIndex={stepIndex}\n                      circleWidth={circleWidth}\n                      circleContainerRotateDeg={circleContainerRotateDeg}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\ninterface PlaceholderLinesProps {\n  isFirstStep: boolean;\n  angleBetweenMinorSteps: number;\n  angle: number;\n  lineCountFillBetweenSteps: number;\n  boundaryPlaceholderLinesCount: number;\n  isLastStep: boolean;\n  lineIndex: number;\n  stepIndex: number;\n  circleWidth: number;\n  circleContainerRotateDeg: number;\n}\nfunction PlaceholderLines(props: PlaceholderLinesProps) {\n  const {\n    isFirstStep,\n    isLastStep,\n    angle,\n    angleBetweenMinorSteps,\n    lineCountFillBetweenSteps,\n    boundaryPlaceholderLinesCount,\n    lineIndex,\n    stepIndex,\n    circleWidth,\n    circleContainerRotateDeg,\n  } = props;\n\n  const getAngle = (index: number) => {\n    if (isFirstStep) {\n      return index * angleBetweenMinorSteps;\n    } else {\n      return angle + (index + 1) * angleBetweenMinorSteps;\n    }\n  };\n\n  return (\n    <>\n      {Array(\n        isLastStep || isFirstStep\n          ? boundaryPlaceholderLinesCount\n          : lineCountFillBetweenSteps\n      )\n        .fill(\"\")\n        .map((_, fillIndex) => {\n          const fillAngle = getAngle(fillIndex);\n          return (\n            <div\n              key={`${lineIndex}-${stepIndex}-${fillIndex}`}\n              className=\"absolute left-1/2 top-0 h-[34px] w-[1px] -translate-x-1/2\"\n              style={{\n                transformOrigin: `50% ${circleWidth / 2}px`,\n                transform: `rotate(${fillAngle}deg)`,\n              }}\n            >\n              <div\n                className=\"h-full w-full bg-[var(--placeholder-line-color,#a1a1a1)] dark:bg-[var(--placeholder-line-color,#737373)]\"\n                style={{\n                  transformOrigin: \"center top\",\n                  transform: `rotate(${\n                    -1 * fillAngle - circleContainerRotateDeg\n                  }deg)`,\n                }}\n              ></div>\n            </div>\n          );\n        })}\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/magicui/arc-timeline.tsx"
    }
  ]
}