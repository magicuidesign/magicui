{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shine-border",
  "type": "registry:ui",
  "title": "Shine Border",
  "description": "Shine border is an animated background border effect. (v2 - 20205-08-11)",
  "files": [
    {
      "path": "registry/magicui/shine-border.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface ShineBorderProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Width of the border in pixels\n   * @default 1\n   */\n  borderWidth?: number;\n  /**\n   * Second it takes to complete one full shine cycle\n   * AKA: Speed of the animation\n   * (lower = faster)\n   * @default 14\n   */\n  duration?: number;\n  /**\n   * Whether the animation should fade out after the fadeoutAfter duration\n   * @default false\n   */\n  fadeout?: boolean;\n  /**\n   * Duration of the shine effect in seconds after it becomes active\n   * Requires: `fadeout = {true}`\n   * @default 15 (seconds)\n   */\n  fadeoutAfter?: number;\n  /**\n   * Duration of the fade out effect in seconds\n   * @default 0.5\n   */\n  fadeoutDuration?: number;\n  /**\n   * Whether the animation should fade in when it starts\n   * @default false\n   */\n  fadein?: boolean;\n  /**\n   * Duration of the fade in effect in seconds\n   * @default 0.5\n   */\n  fadeinDuration?: number;\n  /**\n   * Delay in seconds before the animation starts after component mount\n   * @default 0\n   */\n  delayLoad?: number;\n  /**\n   * Color of the border, can be a single color or an array of colors\n   * @default \"#000000\"\n   */\n  shineColor?: string | string[];\n}\n\n/**\n * Shine Border\n *\n * An animated background border effect component with configurable properties.\n */\nexport function ShineBorder({\n  borderWidth = 1,\n  duration = 14,\n  fadeout = false,\n  fadeoutAfter = 15,\n  fadeoutDuration = 0.5,\n  fadein = false,\n  fadeinDuration = 0.5,\n  delayLoad = 0,\n  shineColor = \"#000000\",\n  className,\n  style,\n  ...props\n}: ShineBorderProps) {\n  const [isComplete, setIsComplete] = React.useState(false);\n  const [hasStarted, setHasStarted] = React.useState(\n    !fadein && delayLoad === 0,\n  );\n  const [isDelayComplete, setIsDelayComplete] = React.useState(delayLoad === 0);\n\n  // Handle delay timer\n  React.useEffect(() => {\n    if (delayLoad > 0) {\n      const delayTimer = setTimeout(() => {\n        setIsDelayComplete(true);\n        if (!fadein) {\n          setHasStarted(true);\n        }\n      }, delayLoad * 1000);\n\n      return () => clearTimeout(delayTimer);\n    }\n  }, [delayLoad, fadein]);\n\n  React.useEffect(() => {\n    if (fadein && isDelayComplete) {\n      // Start the fade-in after delay is complete\n      const fadeInTimer = setTimeout(() => {\n        setHasStarted(true);\n      }, 10); // Small delay to ensure the initial state is rendered\n\n      return () => clearTimeout(fadeInTimer);\n    }\n  }, [fadein, isDelayComplete]);\n\n  React.useEffect(() => {\n    if (fadeoutAfter && fadeoutAfter > 0) {\n      // Calculate total time: delay + fade-in + active animation time\n      const totalDelay = delayLoad + (fadein ? fadeinDuration : 0);\n      const timer = setTimeout(\n        () => {\n          setIsComplete(true);\n        },\n        (totalDelay + fadeoutAfter) * 1000,\n      );\n\n      return () => clearTimeout(timer);\n    }\n  }, [fadeoutAfter, delayLoad, fadein, fadeinDuration]);\n\n  const shouldAnimate = !fadeoutAfter || !isComplete || !fadeout;\n\n  // Calculate opacity based on fade states\n  let opacity = 1;\n  if (fadein && !hasStarted) {\n    opacity = 0;\n  } else if (fadeoutAfter && isComplete && fadeout) {\n    opacity = 0;\n  }\n\n  // Calculate transition\n  let transition: string | undefined;\n  if (fadein && !hasStarted) {\n    transition = `opacity ${fadeinDuration}s ease-in`;\n  } else if (fadeout) {\n    transition = `opacity ${fadeoutDuration}s ease-out`;\n  }\n  return (\n    <div\n      style={\n        {\n          \"--border-width\": `${borderWidth}px`,\n          \"--duration\": `${duration}s`,\n          backgroundImage: `radial-gradient(transparent,transparent, ${\n            Array.isArray(shineColor) ? shineColor.join(\",\") : shineColor\n          },transparent,transparent)`,\n          backgroundSize: \"300% 300%\",\n          mask: `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,\n          WebkitMask: `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,\n          WebkitMaskComposite: \"xor\",\n          maskComposite: \"exclude\",\n          padding: \"var(--border-width)\",\n          opacity,\n          transition,\n          ...style,\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"pointer-events-none absolute inset-0 size-full rounded-[inherit] will-change-[background-position]\",\n        shouldAnimate && \"motion-safe:animate-shine\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/magicui/shine-border.tsx"
    }
  ],
  "cssVars": {
    "theme": {
      "animate-shine": "shine var(--duration) infinite linear"
    }
  },
  "css": {
    "@keyframes shine": {
      "0%": {
        "background-position": "0% 0%"
      },
      "50%": {
        "background-position": "100% 100%"
      },
      "to": {
        "background-position": "0% 0%"
      }
    }
  }
}