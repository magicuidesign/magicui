{
  "name": "script-copy-btn",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/script-copy-btn.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Copy } from \"lucide-react\";\nimport { codeToHtml } from \"shiki\";\nimport { motion } from \"framer-motion\";\nimport { useTheme } from \"next-themes\";\n\ninterface ScriptCopyBtnProps {\n  showMultiplePackageOptions?: boolean;\n  codeLanguage: string;\n  lightTheme: string;\n  darkTheme: string;\n  commandMap: Record<string, string>;\n}\n\nexport default function ScriptCopyBtn({\n  showMultiplePackageOptions = true,\n  codeLanguage,\n  lightTheme,\n  darkTheme,\n  commandMap,\n}: ScriptCopyBtnProps) {\n  const packageManagers = Object.keys(commandMap);\n  const [packageManager, setPackageManager] = useState(packageManagers[0]);\n  const [copied, setCopied] = useState(false);\n  const [highlightedCode, setHighlightedCode] = useState(\"\");\n  const { theme } = useTheme();\n\n  const command = commandMap[packageManager];\n\n  useEffect(() => {\n    async function loadHighlightedCode() {\n      try {\n        const highlighted = await codeToHtml(command, {\n          lang: codeLanguage,\n          themes: {\n            light: lightTheme,\n            dark: darkTheme,\n          },\n          defaultColor: theme === \"dark\" ? \"dark\" : \"light\",\n        });\n        setHighlightedCode(highlighted);\n      } catch (error) {\n        console.error(\"Error highlighting code:\", error);\n        setHighlightedCode(`<pre>${command}</pre>`);\n      }\n    }\n\n    loadHighlightedCode();\n  }, [command, theme, codeLanguage, lightTheme, darkTheme]);\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(command);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <section className=\"mx-auto flex max-w-md items-center justify-center\">\n      <div className=\"w-full space-y-2\">\n        <div className=\"mb-2 flex items-center justify-between\">\n          {showMultiplePackageOptions && (\n            <div className=\"relative\">\n              <div className=\"inline-flex overflow-hidden rounded-md border border-border text-xs\">\n                {packageManagers.map((pm, index) => (\n                  <div key={pm} className=\"flex items-center\">\n                    {index > 0 && (\n                      <div className=\"h-4 w-px bg-border\" aria-hidden=\"true\" />\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className={`relative rounded-none bg-background px-2 py-1 hover:bg-background ${\n                        packageManager === pm\n                          ? \"text-primary\"\n                          : \"text-muted-foreground\"\n                      }`}\n                      onClick={() => setPackageManager(pm)}\n                    >\n                      {pm}\n                      {packageManager === pm && (\n                        <motion.div\n                          className=\"absolute inset-x-0 bottom-[1px] mx-auto h-0.5 w-[90%] bg-primary\"\n                          layoutId=\"activeTab\"\n                          initial={false}\n                          transition={{\n                            type: \"spring\",\n                            stiffness: 500,\n                            damping: 30,\n                          }}\n                        />\n                      )}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"relative flex items-center\">\n          <div className=\"min-w-[300px] grow font-mono\">\n            {highlightedCode ? (\n              <div\n                className={`[&>pre]:overflow-x-auto [&>pre]:rounded-md [&>pre]:p-2 [&>pre]:px-4 [&>pre]:font-mono ${\n                  theme === \"dark\" ? \"dark\" : \"light\"\n                }`}\n                dangerouslySetInnerHTML={{ __html: highlightedCode }}\n              />\n            ) : (\n              <pre className=\"rounded-md border border-border bg-white p-2 px-4 font-mono dark:bg-black\">\n                {command}\n              </pre>\n            )}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"relative ml-2 rounded-md\"\n            onClick={copyToClipboard}\n            aria-label={copied ? \"Copied\" : \"Copy to clipboard\"}\n          >\n            <span className=\"sr-only\">{copied ? \"Copied\" : \"Copy\"}</span>\n            <Copy\n              className={`h-4 w-4 transition-all duration-300 ${\n                copied ? \"scale-0\" : \"scale-100\"\n              }`}\n            />\n            <Check\n              className={`absolute inset-0 m-auto h-4 w-4 transition-all duration-300 ${\n                copied ? \"scale-100\" : \"scale-0\"\n              }`}\n            />\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}