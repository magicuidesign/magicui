{
  "name": "confetti",
  "type": "registry:ui",
  "dependencies": [
    "canvas-confetti",
    "@types/canvas-confetti"
  ],
  "files": [
    {
      "path": "magicui/confetti.tsx",
      "content": "import type { ReactNode } from \"react\";\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport type {\n  GlobalOptions as ConfettiGlobalOptions,\n  CreateTypes as ConfettiInstance,\n  Options as ConfettiOptions,\n} from \"canvas-confetti\";\nimport confetti from \"canvas-confetti\";\n\nimport { Button, ButtonProps } from \"@/components/ui/button\";\n\ntype Api = {\n  fire: (options?: ConfettiOptions) => void;\n};\n\ntype Props = React.ComponentPropsWithRef<\"canvas\"> & {\n  options?: ConfettiOptions;\n  globalOptions?: ConfettiGlobalOptions;\n  manualstart?: boolean;\n  children?: ReactNode;\n};\n\nexport type ConfettiRef = Api | null;\n\nconst ConfettiContext = createContext<Api>({} as Api);\n\nconst Confetti = forwardRef<ConfettiRef, Props>((props, ref) => {\n  const {\n    options,\n    globalOptions = { resize: true, useWorker: true },\n    manualstart = false,\n    children,\n    ...rest\n  } = props;\n  const instanceRef = useRef<ConfettiInstance | null>(null); // confetti instance\n\n  const canvasRef = useCallback(\n    // https://react.dev/reference/react-dom/components/common#ref-callback\n    // https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\n    (node: HTMLCanvasElement) => {\n      if (node !== null) {\n        // <canvas> is mounted => create the confetti instance\n        if (instanceRef.current) return; // if not already created\n        instanceRef.current = confetti.create(node, {\n          ...globalOptions,\n          resize: true,\n        });\n      } else {\n        // <canvas> is unmounted => reset and destroy instanceRef\n        if (instanceRef.current) {\n          instanceRef.current.reset();\n          instanceRef.current = null;\n        }\n      }\n    },\n    [globalOptions],\n  );\n\n  // `fire` is a function that calls the instance() with `opts` merged with `options`\n  const fire = useCallback(\n    (opts = {}) => instanceRef.current?.({ ...options, ...opts }),\n    [options],\n  );\n\n  const api = useMemo(\n    () => ({\n      fire,\n    }),\n    [fire],\n  );\n\n  useImperativeHandle(ref, () => api, [api]);\n\n  useEffect(() => {\n    if (!manualstart) {\n      fire();\n    }\n  }, [manualstart, fire]);\n\n  return (\n    <ConfettiContext.Provider value={api}>\n      <canvas ref={canvasRef} {...rest} />\n      {children}\n    </ConfettiContext.Provider>\n  );\n});\n\ninterface ConfettiButtonProps extends ButtonProps {\n  options?: ConfettiOptions &\n    ConfettiGlobalOptions & { canvas?: HTMLCanvasElement };\n  children?: React.ReactNode;\n}\n\nfunction ConfettiButton({ options, children, ...props }: ConfettiButtonProps) {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    const x = rect.left + rect.width / 2;\n    const y = rect.top + rect.height / 2;\n    confetti({\n      ...options,\n      origin: {\n        x: x / window.innerWidth,\n        y: y / window.innerHeight,\n      },\n    });\n  };\n\n  return (\n    <Button onClick={handleClick} {...props}>\n      {children}\n    </Button>\n  );\n}\n\nConfetti.displayName = \"Confetti\";\n\nexport { Confetti, ConfettiButton };\n\nexport default Confetti;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}