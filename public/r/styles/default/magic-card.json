{
  "name": "magic-card",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/magic-card.tsx",
      "content": "\"use client\";\n\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface MagicCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  gradientSize?: number;\n  gradientColor?: string;\n  gradientOpacity?: number;\n  gradientColors?: [string, string, string];\n}\n\nexport function MagicCard({\n  children,\n  className,\n  gradientSize = 200,\n  gradientColor = \"#262626\",\n  gradientOpacity = 0.8,\n  gradientColors = [\"#FF0080\", \"#4096FF\", \"#78FF78\"],\n}: MagicCardProps) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const mouseX = useMotionValue(-gradientSize);\n  const mouseY = useMotionValue(-gradientSize);\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (cardRef.current) {\n        const { left, top } = cardRef.current.getBoundingClientRect();\n        const clientX = e.clientX;\n        const clientY = e.clientY;\n        mouseX.set(clientX - left);\n        mouseY.set(clientY - top);\n      }\n    },\n    [mouseX, mouseY]\n  );\n\n  const handleMouseOut = useCallback(\n    (e: MouseEvent) => {\n      if (!e.relatedTarget) {\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        mouseX.set(-gradientSize);\n        mouseY.set(-gradientSize);\n      }\n    },\n    [handleMouseMove, mouseX, gradientSize, mouseY]\n  );\n\n  const handleMouseEnter = useCallback(() => {\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    mouseX.set(-gradientSize);\n    mouseY.set(-gradientSize);\n  }, [handleMouseMove, mouseX, gradientSize, mouseY]);\n\n  useEffect(() => {\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseout\", handleMouseOut);\n    document.addEventListener(\"mouseenter\", handleMouseEnter);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseout\", handleMouseOut);\n      document.removeEventListener(\"mouseenter\", handleMouseEnter);\n    };\n  }, [handleMouseEnter, handleMouseMove, handleMouseOut]);\n\n  useEffect(() => {\n    mouseX.set(-gradientSize);\n    mouseY.set(-gradientSize);\n  }, [gradientSize, mouseX, mouseY]);\n\n  return (\n    <div\n      ref={cardRef}\n      className={cn(\n        \"group relative flex size-full rounded-xl backdrop-blur-lg\",\n        className\n      )}\n    >\n      <div className=\"absolute inset-0.5 z-10 rounded-xl bg-neutral-100 dark:bg-neutral-900\" />\n      <div className=\"relative z-30\">{children}</div>\n      <motion.div\n        className=\"pointer-events-none absolute inset-px z-10 rounded-xl opacity-0 transition-opacity duration-300 group-hover:opacity-100\"\n        style={{\n          background: useMotionTemplate`\n            radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px, ${gradientColor}, transparent 100%)\n          `,\n          opacity: gradientOpacity,\n        }}\n      />\n      <motion.div\n        className=\"pointer-events-none absolute inset-px rounded-xl duration-300 group-hover:opacity-100\"\n        style={{\n          background: useMotionTemplate`\n            radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px,\n              ${gradientColors[0]}, \n              ${gradientColors[1]}, \n              ${gradientColors[2]}, \n              transparent 100%\n            )\n          `,\n          opacity: 1,\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}