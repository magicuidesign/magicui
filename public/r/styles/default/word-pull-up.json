{
  "name": "word-pull-up",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "magicui/word-pull-up.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, MotionProps, useInView, Variants } from \"motion/react\";\nimport { useRef } from \"react\";\n\ninterface WordPullUpProps extends MotionProps {\n  children: string;\n  className?: string;\n  delayMultiple?: number;\n  variants?: Variants;\n  wordVariants?: Variants;\n  startOnView?: boolean;\n  as?: React.ElementType;\n}\n\nexport default function WordPullUp({\n  children,\n  className,\n  as: Component = \"h1\",\n  variants = {\n    hidden: { opacity: 0 },\n    show: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n      },\n    },\n  },\n  wordVariants = {\n    hidden: { y: 20, opacity: 0 },\n    show: { y: 0, opacity: 1 },\n  },\n  startOnView = false,\n}: WordPullUpProps) {\n  const MotionComponent = motion.create(Component);\n  const ref = useRef<HTMLElement>(null);\n  const inView = useInView(ref, { once: true, margin: \"-30% 0px -30% 0px\" });\n  const shouldAnimate = startOnView ? inView : true;\n\n  return (\n    <MotionComponent\n      ref={ref}\n      variants={variants}\n      initial=\"hidden\"\n      animate={shouldAnimate ? \"show\" : \"hidden\"}\n      className={cn(\n        \"text-4xl font-bold leading-[5rem] tracking-[-0.02em]\",\n        className,\n      )}\n    >\n      {children.split(\" \").map((word, i) => (\n        <motion.span\n          key={i}\n          variants={wordVariants}\n          style={{ display: \"inline-block\", paddingRight: \"8px\" }}\n        >\n          {word === \"\" ? <span>&nbsp;</span> : word}\n        </motion.span>\n      ))}\n    </MotionComponent>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}