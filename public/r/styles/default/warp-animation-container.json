{
  "name": "warp-animation-container",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/warp-animation-container.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport React, { HTMLAttributes, useCallback, useMemo } from \"react\";\n\ninterface WarpAnimationContainerProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  perspective?: number;\n  beamsPerSide?: number;\n  beamSize?: number;\n  beamDelayMax?: number;\n  beamDelayMin?: number;\n  beamDuration?: number;\n  gridColor?: string;\n}\n\nconst Beam = ({\n  width,\n  x,\n  delay,\n  duration,\n}: {\n  width: string | number;\n  x: string | number;\n  delay: number;\n  duration: number;\n}) => {\n  const hue = Math.floor(Math.random() * 360);\n  const ar = Math.floor(Math.random() * 10) + 1;\n\n  return (\n    <motion.div\n      className={`absolute top-0`}\n      style={{\n        left: x,\n        width,\n        aspectRatio: 1 / ar,\n        background: `linear-gradient(hsl(${hue} 80% 60%), transparent)`,\n      }}\n      initial={{ y: \"100cqmax\", x: \"-50%\" }}\n      animate={{ y: \"-100%\", x: \"-50%\" }}\n      transition={{\n        duration,\n        delay,\n        repeat: Infinity,\n        ease: \"linear\",\n      }}\n    />\n  );\n};\n\nconst WarpAnimationContainer: React.FC<WarpAnimationContainerProps> = ({\n  children,\n  perspective = 100,\n  className,\n  beamsPerSide = 3,\n  beamSize = 5,\n  beamDelayMax = 3,\n  beamDelayMin = 0,\n  beamDuration = 3,\n  gridColor = \"hsl(var(--border))\",\n  ...props\n}) => {\n  const generateBeams = useCallback(() => {\n    const beams = [];\n    const cellsPerSide = Math.floor(100 / beamSize);\n    const step = cellsPerSide / beamsPerSide;\n\n    for (let i = 0; i < beamsPerSide; i++) {\n      const x = Math.floor(i * step);\n      const delay =\n        Math.random() * (beamDelayMax - beamDelayMin) + beamDelayMin;\n      beams.push({ x, delay });\n    }\n    return beams;\n  }, [beamsPerSide, beamSize, beamDelayMax, beamDelayMin]);\n\n  const topBeams = useMemo(() => generateBeams(), [generateBeams]);\n  const rightBeams = useMemo(() => generateBeams(), [generateBeams]);\n  const bottomBeams = useMemo(() => generateBeams(), [generateBeams]);\n  const leftBeams = useMemo(() => generateBeams(), [generateBeams]);\n\n  return (\n    <div className={cn(\"relative rounded border p-20\", className)} {...props}>\n      <div\n        style={\n          {\n            \"--perspective\": `${perspective}px`,\n            \"--grid-color\": gridColor,\n            \"--beam-size\": `${beamSize}%`,\n          } as React.CSSProperties\n        }\n        className={\n          \"pointer-events-none absolute left-0 top-0 size-full overflow-hidden [clip-path:inset(0)] [container-type:size] [perspective:var(--perspective)] [transform-style:preserve-3d]\"\n        }\n      >\n        <div\n          style={{\n            position: \"absolute\",\n            transformStyle: \"preserve-3d\",\n            containerType: \"inline-size\",\n            width: \"100cqi\",\n            height: \"100cqmax\",\n            transformOrigin: \"50% 0%\",\n            transform: \"rotateX(-90deg)\",\n            backgroundSize: `var(--beam-size) var(--beam-size)`,\n            background: `\n            linear-gradient(var(--grid-color) 0 1px, transparent 1px var(--beam-size)) 50% -0.5px /\n            var(--beam-size) var(--beam-size),\n            linear-gradient(90deg, var(--grid-color) 0 1px, transparent 1px var(--beam-size))\n            50% 50% / var(--beam-size) var(--beam-size)\n          `,\n          }}\n        >\n          {topBeams.map((beam, index) => (\n            <Beam\n              key={`top-${index}`}\n              width={`${beamSize}%`}\n              x={`${beam.x * beamSize}%`}\n              delay={beam.delay}\n              duration={beamDuration}\n            />\n          ))}\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            transformStyle: \"preserve-3d\",\n            containerType: \"inline-size\",\n            width: \"100cqi\",\n            height: \"100cqmax\",\n            top: \"100%\",\n            transformOrigin: \"50% 0%\",\n            transform: \"rotateX(-90deg)\",\n            backgroundSize: `var(--beam-size) var(--beam-size)`,\n            background: `\n            linear-gradient(var(--grid-color) 0 1px, transparent 1px var(--beam-size)) 50% -0.5px /\n            var(--beam-size) var(--beam-size),\n            linear-gradient(90deg, var(--grid-color) 0 1px, transparent 1px var(--beam-size))\n            50% 50% / var(--beam-size) var(--beam-size)\n          `,\n          }}\n        >\n          {bottomBeams.map((beam, index) => (\n            <Beam\n              key={`bottom-${index}`}\n              width={`${beamSize}%`}\n              x={`${beam.x * beamSize}%`}\n              delay={beam.delay}\n              duration={beamDuration}\n            />\n          ))}\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            transformStyle: \"preserve-3d\",\n            containerType: \"inline-size\",\n            width: \"100cqh\",\n            height: \"100cqmax\",\n            top: 0,\n            left: 0,\n            transformOrigin: \"0% 0%\",\n            transform: \"rotate(90deg) rotateX(-90deg)\",\n            backgroundSize: `var(--beam-size) var(--beam-size)`,\n            background: `\n            linear-gradient(var(--grid-color) 0 1px, transparent 1px var(--beam-size)) 50% -0.5px /\n            var(--beam-size) var(--beam-size),\n            linear-gradient(90deg, var(--grid-color) 0 1px, transparent 1px var(--beam-size))\n            50% 50% / var(--beam-size) var(--beam-size)\n          `,\n          }}\n        >\n          {leftBeams.map((beam, index) => (\n            <Beam\n              key={`left-${index}`}\n              width={`${beamSize}%`}\n              x={`${beam.x * beamSize}%`}\n              delay={beam.delay}\n              duration={beamDuration}\n            />\n          ))}\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            transformStyle: \"preserve-3d\",\n            containerType: \"inline-size\",\n            width: \"100cqh\",\n            height: \"100cqmax\",\n            top: 0,\n            right: 0,\n            transformOrigin: \"100% 0%\",\n            transform: \"rotate(-90deg) rotateX(-90deg)\",\n            backgroundSize: `var(--beam-size) var(--beam-size)`,\n            background: `\n            linear-gradient(var(--grid-color) 0 1px, transparent 1px var(--beam-size)) 50% -0.5px /\n            var(--beam-size) var(--beam-size),\n            linear-gradient(90deg, var(--grid-color) 0 1px, transparent 1px var(--beam-size))\n            50% 50% / var(--beam-size) var(--beam-size)\n          `,\n          }}\n        >\n          {rightBeams.map((beam, index) => (\n            <Beam\n              key={`right-${index}`}\n              width={`${beamSize}%`}\n              x={`${beam.x * beamSize}%`}\n              delay={beam.delay}\n              duration={beamDuration}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"relative\">{children}</div>\n    </div>\n  );\n};\n\nexport default WarpAnimationContainer;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}