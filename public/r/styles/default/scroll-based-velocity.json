{
  "name": "scroll-based-velocity",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "magicui/scroll-based-velocity.tsx",
      "content": "\"use client\";\n\nimport {\n  motion,\n  useAnimationFrame,\n  useMotionValue,\n  useScroll,\n  useSpring,\n  useTransform,\n  useVelocity,\n} from \"motion/react\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface VelocityScrollProps extends React.HTMLAttributes<HTMLDivElement> {\n  defaultVelocity?: number;\n  className?: string;\n  numRows?: number;\n}\n\ninterface ParallaxProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  baseVelocity: number;\n}\n\nexport const wrap = (min: number, max: number, v: number) => {\n  const rangeSize = max - min;\n  return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nfunction ParallaxText({\n  children,\n  baseVelocity = 100,\n  ...props\n}: ParallaxProps) {\n  const baseX = useMotionValue(0);\n  const { scrollY } = useScroll();\n  const scrollVelocity = useVelocity(scrollY);\n  const smoothVelocity = useSpring(scrollVelocity, {\n    damping: 50,\n    stiffness: 400,\n  });\n\n  const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {\n    clamp: false,\n  });\n\n  const [repetitions, setRepetitions] = useState(1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const calculateRepetitions = () => {\n      if (containerRef.current && textRef.current) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const textWidth = textRef.current.offsetWidth;\n        const newRepetitions = Math.ceil(containerWidth / textWidth) + 2;\n        setRepetitions(newRepetitions);\n      }\n    };\n\n    calculateRepetitions();\n\n    window.addEventListener(\"resize\", calculateRepetitions);\n    return () => window.removeEventListener(\"resize\", calculateRepetitions);\n  }, [children]);\n\n  const x = useTransform(baseX, (v) => `${wrap(-100 / repetitions, 0, v)}%`);\n\n  const directionFactor = React.useRef<number>(1);\n  useAnimationFrame((t, delta) => {\n    let moveBy = directionFactor.current * baseVelocity * (delta / 1000);\n\n    if (velocityFactor.get() < 0) {\n      directionFactor.current = -1;\n    } else if (velocityFactor.get() > 0) {\n      directionFactor.current = 1;\n    }\n\n    moveBy += directionFactor.current * moveBy * velocityFactor.get();\n\n    baseX.set(baseX.get() + moveBy);\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"w-full overflow-hidden whitespace-nowrap\"\n      {...props}\n    >\n      <motion.div className=\"inline-block\" style={{ x }}>\n        {Array.from({ length: repetitions }).map((_, i) => (\n          <span key={i} ref={i === 0 ? textRef : null}>\n            {children}{\" \"}\n          </span>\n        ))}\n      </motion.div>\n    </div>\n  );\n}\n\nexport function VelocityScroll({\n  defaultVelocity = 5,\n  numRows = 2,\n  children,\n  className,\n  ...props\n}: VelocityScrollProps) {\n  return (\n    <div\n      className={cn(\n        \"relative w-full text-4xl font-bold tracking-[-0.02em] md:text-7xl md:leading-[5rem]\",\n        className,\n      )}\n      {...props}\n    >\n      {Array.from({ length: numRows }).map((_, i) => (\n        <ParallaxText\n          key={i}\n          baseVelocity={defaultVelocity * (i % 2 === 0 ? 1 : -1)}\n        >\n          {children}\n        </ParallaxText>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}