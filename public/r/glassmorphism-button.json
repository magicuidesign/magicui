{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glassmorphism-button",
  "type": "registry:ui",
  "title": "Glassmorphism Button",
  "description": "A glowing button component with glassmorphism effect.",
  "files": [
    {
      "path": "registry/magicui/glassmorphism-button.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\ninterface GlassmorphismButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"circle\" | \"diamond\";\n  color?: string;\n  children: React.ReactNode;\n}\n\n/**\n * A React functional component that renders a customizable glassmorphism-styled button.\n * This button supports a \"diamond\" variant and allows for dynamic color and className customization.\n * It includes hover effects, animations, and a visually appealing glass-like appearance.\n *\n * @param {GlassmorphismButtonProps} props - The properties for the GlassmorphismButton component.\n * @param {string} [props.variant=\"diamond\"] - The visual style variant of the button. Defaults to \"diamond\".\n * @param {string} [props.color=\"purple\"] - The color of the button. Defaults to \"purple\".\n * @param {React.ReactNode} props.children - The content to be displayed inside the button.\n * @param {string} [props.className] - Additional CSS classes to apply to the button.\n * @param {React.Ref<HTMLButtonElement>} ref - A ref to the underlying button element.\n * @returns {JSX.Element} The rendered glassmorphism button component.\n */\nexport const GlassmorphismButton = React.forwardRef<\n  HTMLButtonElement,\n  GlassmorphismButtonProps\n>(\n  (\n    { variant = \"diamond\", color = \"purple\", children, className, ...props },\n    ref,\n  ) => {\n    return (\n      <button\n        ref={ref}\n        style={{ color }}\n        className={cn(\n          \"group relative w-fit h-12 m-2 transition-all duration-500 cursor-pointer\",\n          // before styling\n          \"before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-16 before:h-16 before:rounded-full before:transition-all before:duration-500 before:pointer-events-none before:bg-current\",\n          // before hover styling\n          \"hover:before:w-full hover:before:h-full hover:before:rounded-4xl hover:before:rotate-0\",\n          // before shadow / glow\n          \"before:shadow-current before:shadow-[0_0_5px_current,0_0_15px_current,0_0_30px_current,0_0_60px_current]\",\n          // diamond variant\n          variant === \"diamond\" &&\n            \"before:rotate-45 before:rounded-[10px] before:w-14 before:h-14\",\n          className,\n        )}\n        {...props}\n      >\n        <span\n          className={cn(\n            \"inset-0 relative px-10 w-full h-full flex justify-center items-center z-10 rounded-4xl\",\n            \"text-white hover:text-white\",\n            \"bg-white/5 dark:bg-white/10\",\n            \"backdrop-blur-lg\",\n            \"border-t border-b border-white/30 dark:border-white/10\",\n            // hover transition\n            \"hover:tracking-wide transition-all duration-500 overflow-hidden\",\n            // before styling\n            \"before:content-[''] before:absolute before:top-0 before:left-[80%] before:w-1/2 before:h-full before:-translate-x-[150%] before:skew-x-[45deg] before:transition-all before:duration-500\",\n            // before background color\n            \"before:bg-gradient-to-l before:from-white/20 dark:before:from-white/15 before:to-transparent\",\n            // on hover before styles\n            \"hover:before:translate-x-[200%]\",\n            // on group hover styles\n            \"group-hover:translate-y-px\",\n          )}\n        >\n          {children}\n        </span>\n      </button>\n    );\n  },\n);\n\nGlassmorphismButton.displayName = \"GlassmorphismButton\";\n",
      "type": "registry:ui",
      "target": "components/magicui/glassmorphism-button.tsx"
    }
  ]
}