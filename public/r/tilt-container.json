{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tilt-container",
  "type": "registry:ui",
  "title": "Tilt Container",
  "description": "A component that animates a container with a tilt animation.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/tilt-container.tsx",
      "content": "\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"motion/react\"\r\n\r\ninterface TiltProps {\r\n  children: React.ReactNode\r\n  perspective?: number\r\n  tiltMaxAngleX?: number\r\n  tiltMaxAngleY?: number\r\n  scale?: number\r\n  speed?: number\r\n  className?: string\r\n  glareOpacity?: number\r\n  disabled?: boolean\r\n}\r\n\r\nexport function Tilt({\r\n  children,\r\n  perspective = 1000,\r\n  tiltMaxAngleX = 20,\r\n  tiltMaxAngleY = 20,\r\n  scale = 1.05,\r\n  speed = 500,\r\n  className = \"\",\r\n  glareOpacity = 0.2,\r\n  disabled = false,\r\n}: TiltProps) {\r\n  const containerRef = useRef<HTMLDivElement>(null)\r\n  const [isHovered, setIsHovered] = useState(false)\r\n\r\n  const mouseX = useMotionValue(0)\r\n  const mouseY = useMotionValue(0)\r\n\r\n  const springConfig = { damping: 15, stiffness: speed }\r\n  const rotateX = useSpring(useMotionValue(0), springConfig)\r\n  const rotateY = useSpring(useMotionValue(0), springConfig)\r\n  const scaleValue = useSpring(1, springConfig)\r\n\r\n  const tiltXInput = disabled ? [0, 0] : [-0.5, 0.5]\r\n  const tiltYInput = disabled ? [0, 0] : [-0.5, 0.5]\r\n  const tiltXOutput = disabled ? [0, 0] : [tiltMaxAngleX, -tiltMaxAngleX]\r\n  const tiltYOutput = disabled ? [0, 0] : [-tiltMaxAngleY, tiltMaxAngleY]\r\n\r\n  const tiltX = useTransform(mouseY, tiltXInput, tiltXOutput)\r\n  const tiltY = useTransform(mouseX, tiltYInput, tiltYOutput)\r\n\r\n  const glareX = useTransform(mouseX, [-0.5, 0.5], [\"0%\", \"100%\"])\r\n  const glareY = useTransform(mouseY, [-0.5, 0.5], [\"0%\", \"100%\"])\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!containerRef.current || disabled) return\r\n\r\n    const rect = containerRef.current.getBoundingClientRect()\r\n\r\n    const centerX = rect.left + rect.width / 2\r\n    const centerY = rect.top + rect.height / 2\r\n    const posX = (e.clientX - centerX) / rect.width\r\n    const posY = (e.clientY - centerY) / rect.height\r\n\r\n    mouseX.set(posX)\r\n    mouseY.set(posY)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (disabled) return\r\n\r\n    const unsubscribeX = tiltX.onChange((v) => rotateX.set(v))\r\n    const unsubscribeY = tiltY.onChange((v) => rotateY.set(v))\r\n\r\n    return () => {\r\n      unsubscribeX()\r\n      unsubscribeY()\r\n    }\r\n  }, [tiltX, tiltY, rotateX, rotateY, disabled])\r\n\r\n  const handleMouseEnter = () => {\r\n    if (disabled) return\r\n    setIsHovered(true)\r\n    scaleValue.set(scale)\r\n  }\r\n\r\n  const handleMouseLeave = () => {\r\n    if (disabled) return\r\n    setIsHovered(false)\r\n    mouseX.set(0)\r\n    mouseY.set(0)\r\n    scaleValue.set(1)\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      ref={containerRef}\r\n      className={`${className}`}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      style={{\r\n        perspective: perspective,\r\n        transformStyle: \"preserve-3d\",\r\n      }}\r\n    >\r\n      <motion.div\r\n        style={{\r\n          rotateX: rotateX,\r\n          rotateY: rotateY,\r\n          scale: scaleValue,\r\n          transformStyle: \"preserve-3d\",\r\n        }}\r\n      >\r\n        <div style={{ transform: \"translateZ(40px)\", transformStyle: \"preserve-3d\" }}>{children}</div>\r\n\r\n        {isHovered && glareOpacity > 0 && (\r\n          <div\r\n            className=\"absolute inset-0 pointer-events-none overflow-hidden\"\r\n            style={{\r\n              borderRadius: \"inherit\",\r\n              zIndex: 2,\r\n            }}\r\n          >\r\n            <div\r\n              className=\"absolute bg-gradient-radial from-white to-transparent\"\r\n              style={{\r\n                top: glareY.get(),\r\n                left: glareX.get(),\r\n                width: \"200%\",\r\n                height: \"200%\",\r\n                opacity: glareOpacity,\r\n                transform: \"translate(-50%, -50%)\",\r\n                borderRadius: \"inherit\",\r\n                pointerEvents: \"none\",\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/magicui/tilt-container.tsx"
    }
  ]
}