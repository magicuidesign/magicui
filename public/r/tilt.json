{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tilt",
  "type": "registry:ui",
  "title": "Tilt",
  "description": "A react component that applies a 3D tilt and parallax effect to its content.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/magicui/tilt.tsx",
      "content": "\"use client\";\n\nimport { motion, useMotionValue, useSpring, useTransform } from \"motion/react\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport interface TiltProps {\n  children: React.ReactNode;\n  perspective?: number;\n  tiltMaxAngleX?: number;\n  tiltMaxAngleY?: number;\n  scale?: number;\n  speed?: number;\n  className?: string;\n  glareOpacity?: number;\n  disabled?: boolean;\n  rotationStrength?: number;\n}\n\nexport function Tilt({\n  children,\n  perspective = 1000,\n  tiltMaxAngleX = 20,\n  tiltMaxAngleY = 20,\n  scale = 1.01,\n  speed = 200,\n  className = \"\",\n  glareOpacity = 0.2,\n  disabled = false,\n  rotationStrength = 0.3,\n}: TiltProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n\n  const springConfig = { damping: 15, stiffness: speed };\n  const rotateX = useSpring(useMotionValue(0), springConfig);\n  const rotateY = useSpring(useMotionValue(0), springConfig);\n  const scaleValue = useSpring(1, springConfig);\n\n  const tiltXInput = disabled ? [0, 0] : [-0.5, 0.5];\n  const tiltYInput = disabled ? [0, 0] : [-0.5, 0.5];\n  const tiltXOutput = disabled\n    ? [0, 0]\n    : [tiltMaxAngleX * rotationStrength, -tiltMaxAngleX * rotationStrength];\n  const tiltYOutput = disabled\n    ? [0, 0]\n    : [-tiltMaxAngleY * rotationStrength, tiltMaxAngleY * rotationStrength];\n\n  const tiltX = useTransform(mouseY, tiltXInput, tiltXOutput);\n  const tiltY = useTransform(mouseX, tiltYInput, tiltYOutput);\n\n  const glareX = useTransform(mouseX, [-0.5, 0.5], [\"0%\", \"100%\"]);\n  const glareY = useTransform(mouseY, [-0.5, 0.5], [\"0%\", \"100%\"]);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!containerRef.current || disabled) return;\n\n    const rect = containerRef.current.getBoundingClientRect();\n\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    const posX = (e.clientX - centerX) / rect.width;\n    const posY = (e.clientY - centerY) / rect.height;\n\n    mouseX.set(posX);\n    mouseY.set(posY);\n  };\n\n  useEffect(() => {\n    if (disabled) return;\n\n    const unsubscribeX = tiltX.onChange((v) => rotateX.set(v));\n    const unsubscribeY = tiltY.onChange((v) => rotateY.set(v));\n\n    return () => {\n      unsubscribeX();\n      unsubscribeY();\n    };\n  }, [tiltX, tiltY, rotateX, rotateY, disabled]);\n\n  const handleMouseEnter = () => {\n    if (disabled) return;\n    setIsHovered(true);\n    scaleValue.set(scale);\n  };\n\n  const handleMouseLeave = () => {\n    if (disabled) return;\n    setIsHovered(false);\n    mouseX.set(0);\n    mouseY.set(0);\n    scaleValue.set(1);\n  };\n\n  return (\n    <motion.div\n      ref={containerRef}\n      className={`relative ${className}`}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      style={{\n        perspective: perspective,\n        transformStyle: \"preserve-3d\",\n      }}\n    >\n      <motion.div\n        style={{\n          rotateX: rotateX,\n          rotateY: rotateY,\n          scale: scaleValue,\n          transformStyle: \"preserve-3d\",\n        }}\n      >\n        <div\n          style={{\n            transform: \"translateZ(40px)\",\n            transformStyle: \"preserve-3d\",\n          }}\n        >\n          {children}\n        </div>\n\n        {isHovered && glareOpacity > 0 && (\n          <div\n            className=\"absolute inset-0 pointer-events-none overflow-hidden\"\n            style={{\n              borderRadius: \"inherit\",\n              zIndex: 2,\n            }}\n          >\n            <div\n              className=\"absolute bg-gradient-radial from-white to-transparent\"\n              style={{\n                top: glareY.get(),\n                left: glareX.get(),\n                width: \"200%\",\n                height: \"200%\",\n                opacity: glareOpacity,\n                transform: \"translate(-50%, -50%)\",\n                borderRadius: \"inherit\",\n                pointerEvents: \"none\",\n              }}\n            />\n          </div>\n        )}\n      </motion.div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/magicui/tilt.tsx"
    }
  ]
}