{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-subscribe-button-demo",
  "type": "registry:example",
  "title": "Animated Subscribe Button Demo",
  "description": "Example showing an animated subscribe button with micro animations.",
  "registryDependencies": [
    "https://magicui.design/r/animated-subscribe-button"
  ],
  "files": [
    {
      "path": "registry/example/animated-subscribe-button-demo.tsx",
      "content": "import { AnimatedSubscribeButton } from \"@/components/magicui/animated-subscribe-button\";\nimport { CheckIcon, ChevronRightIcon } from \"lucide-react\";\n\nexport default function AnimatedSubscribeButtonDemo() {\n  return (\n    <AnimatedSubscribeButton className=\"w-36\">\n      <span className=\"group inline-flex items-center\">\n        Follow\n        <ChevronRightIcon className=\"ml-1 size-4 transition-transform duration-300 group-hover:translate-x-1\" />\n      </span>\n      <span className=\"group inline-flex items-center\">\n        <CheckIcon className=\"mr-2 size-4\" />\n        Subscribed\n      </span>\n    </AnimatedSubscribeButton>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/animated-subscribe-button-demo.tsx"
    },
    {
      "path": "registry/magicui/animated-subscribe-button.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { HTMLMotionProps } from \"motion/react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport React, { useState } from \"react\";\n\ninterface AnimatedSubscribeButtonProps\n  extends Omit<HTMLMotionProps<\"button\">, \"ref\"> {\n  subscribeStatus?: boolean;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const AnimatedSubscribeButton = React.forwardRef<\n  HTMLButtonElement,\n  AnimatedSubscribeButtonProps\n>(\n  (\n    { subscribeStatus = false, onClick, className, children, ...props },\n    ref,\n  ) => {\n    const [isSubscribed, setIsSubscribed] = useState<boolean>(subscribeStatus);\n\n    if (\n      React.Children.count(children) !== 2 ||\n      !React.Children.toArray(children).every(\n        (child) => React.isValidElement(child) && child.type === \"span\",\n      )\n    ) {\n      throw new Error(\n        \"AnimatedSubscribeButton expects two children, both of which must be <span> elements.\",\n      );\n    }\n\n    const childrenArray = React.Children.toArray(children);\n    const initialChild = childrenArray[0];\n    const changeChild = childrenArray[1];\n\n    return (\n      <AnimatePresence mode=\"wait\">\n        {isSubscribed ? (\n          <motion.button\n            ref={ref}\n            className={cn(\n              \"relative flex h-10 w-fit items-center justify-center overflow-hidden rounded-lg bg-primary px-6 text-primary-foreground\",\n              className,\n            )}\n            onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n              setIsSubscribed(false);\n              onClick?.(e);\n            }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            {...props}\n          >\n            <motion.span\n              key=\"action\"\n              className=\"relative flex h-full w-full items-center justify-center font-semibold\"\n              initial={{ y: -50 }}\n              animate={{ y: 0 }}\n            >\n              {changeChild} {/* Use children for subscribed state */}\n            </motion.span>\n          </motion.button>\n        ) : (\n          <motion.button\n            ref={ref}\n            className={cn(\n              \"relative flex h-10 w-fit cursor-pointer items-center justify-center rounded-lg border-none bg-primary px-6 text-primary-foreground\",\n              className,\n            )}\n            onClick={(e) => {\n              setIsSubscribed(true);\n              onClick?.(e);\n            }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            {...props}\n          >\n            <motion.span\n              key=\"reaction\"\n              className=\"relative flex items-center justify-center font-semibold\"\n              initial={{ x: 0 }}\n              exit={{ x: 50, transition: { duration: 0.1 } }}\n            >\n              {initialChild} {/* Use children for unsubscribed state */}\n            </motion.span>\n          </motion.button>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\n\nAnimatedSubscribeButton.displayName = \"AnimatedSubscribeButton\";\n",
      "type": "registry:ui",
      "target": "components/magicui/animated-subscribe-button.tsx"
    }
  ]
}