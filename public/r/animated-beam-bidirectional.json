{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-beam-bidirectional",
  "type": "registry:example",
  "title": "Animated Beam Bidirectional",
  "description": "Example showing a bidirectional animated beam effect.",
  "registryDependencies": [
    "https://magicui.design/r/animated-beam"
  ],
  "files": [
    {
      "path": "registry/example/animated-beam-bidirectional.tsx",
      "content": "\"use client\";\n\nimport React, { forwardRef, useRef } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { AnimatedBeam } from \"@/components/magicui/animated-beam\";\n\nconst Circle = forwardRef<\n  HTMLDivElement,\n  { className?: string; children?: React.ReactNode }\n>(({ className, children }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"z-10 flex size-12 items-center justify-center rounded-full border-2 bg-white p-3 shadow-[0_0_20px_-12px_rgba(0,0,0,0.8)]\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n});\n\nCircle.displayName = \"Circle\";\n\nexport default function AnimatedBeamDemo() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const div1Ref = useRef<HTMLDivElement>(null);\n  const div2Ref = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className=\"relative flex w-full max-w-[500px] items-center justify-center overflow-hidden p-10\"\n      ref={containerRef}\n    >\n      <div className=\"flex size-full flex-col items-stretch justify-between gap-10\">\n        <div className=\"flex flex-row justify-between\">\n          <Circle ref={div1Ref}>\n            <Icons.user />\n          </Circle>\n          <Circle ref={div2Ref}>\n            <Icons.openai />\n          </Circle>\n        </div>\n      </div>\n\n      <AnimatedBeam\n        containerRef={containerRef}\n        fromRef={div1Ref}\n        toRef={div2Ref}\n        startYOffset={10}\n        endYOffset={10}\n        curvature={-20}\n      />\n      <AnimatedBeam\n        containerRef={containerRef}\n        fromRef={div1Ref}\n        toRef={div2Ref}\n        startYOffset={-10}\n        endYOffset={-10}\n        curvature={20}\n        reverse\n      />\n    </div>\n  );\n}\n\nconst Icons = {\n  openai: () => (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z\" />\n    </svg>\n  ),\n  user: () => (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"#000000\"\n      strokeWidth=\"2\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n      <circle cx=\"12\" cy=\"7\" r=\"4\" />\n    </svg>\n  ),\n};\n",
      "type": "registry:example",
      "target": "components/animated-beam-bidirectional.tsx"
    },
    {
      "path": "registry/magicui/animated-beam.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"motion/react\";\nimport { RefObject, useEffect, useId, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface AnimatedBeamProps {\n  className?: string;\n  containerRef: RefObject<HTMLElement | null>; // Container ref\n  fromRef: RefObject<HTMLElement | null>;\n  toRef: RefObject<HTMLElement | null>;\n  curvature?: number;\n  reverse?: boolean;\n  pathColor?: string;\n  pathWidth?: number;\n  pathOpacity?: number;\n  gradientStartColor?: string;\n  gradientStopColor?: string;\n  delay?: number;\n  duration?: number;\n  startXOffset?: number;\n  startYOffset?: number;\n  endXOffset?: number;\n  endYOffset?: number;\n}\n\nexport const AnimatedBeam: React.FC<AnimatedBeamProps> = ({\n  className,\n  containerRef,\n  fromRef,\n  toRef,\n  curvature = 0,\n  reverse = false, // Include the reverse prop\n  duration = Math.random() * 3 + 4,\n  delay = 0,\n  pathColor = \"gray\",\n  pathWidth = 2,\n  pathOpacity = 0.2,\n  gradientStartColor = \"#ffaa40\",\n  gradientStopColor = \"#9c40ff\",\n  startXOffset = 0,\n  startYOffset = 0,\n  endXOffset = 0,\n  endYOffset = 0,\n}) => {\n  const id = useId();\n  const [pathD, setPathD] = useState(\"\");\n  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });\n\n  // Calculate the gradient coordinates based on the reverse prop\n  const gradientCoordinates = reverse\n    ? {\n        x1: [\"90%\", \"-10%\"],\n        x2: [\"100%\", \"0%\"],\n        y1: [\"0%\", \"0%\"],\n        y2: [\"0%\", \"0%\"],\n      }\n    : {\n        x1: [\"10%\", \"110%\"],\n        x2: [\"0%\", \"100%\"],\n        y1: [\"0%\", \"0%\"],\n        y2: [\"0%\", \"0%\"],\n      };\n\n  useEffect(() => {\n    const updatePath = () => {\n      if (containerRef.current && fromRef.current && toRef.current) {\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const rectA = fromRef.current.getBoundingClientRect();\n        const rectB = toRef.current.getBoundingClientRect();\n\n        const svgWidth = containerRect.width;\n        const svgHeight = containerRect.height;\n        setSvgDimensions({ width: svgWidth, height: svgHeight });\n\n        const startX =\n          rectA.left - containerRect.left + rectA.width / 2 + startXOffset;\n        const startY =\n          rectA.top - containerRect.top + rectA.height / 2 + startYOffset;\n        const endX =\n          rectB.left - containerRect.left + rectB.width / 2 + endXOffset;\n        const endY =\n          rectB.top - containerRect.top + rectB.height / 2 + endYOffset;\n\n        const controlY = startY - curvature;\n        const d = `M ${startX},${startY} Q ${\n          (startX + endX) / 2\n        },${controlY} ${endX},${endY}`;\n        setPathD(d);\n      }\n    };\n\n    // Initialize ResizeObserver\n    const resizeObserver = new ResizeObserver((entries) => {\n      // For all entries, recalculate the path\n      for (let entry of entries) {\n        updatePath();\n      }\n    });\n\n    // Observe the container element\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    // Call the updatePath initially to set the initial path\n    updatePath();\n\n    // Clean up the observer on component unmount\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [\n    containerRef,\n    fromRef,\n    toRef,\n    curvature,\n    startXOffset,\n    startYOffset,\n    endXOffset,\n    endYOffset,\n  ]);\n\n  return (\n    <svg\n      fill=\"none\"\n      width={svgDimensions.width}\n      height={svgDimensions.height}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\n        \"pointer-events-none absolute left-0 top-0 transform-gpu stroke-2\",\n        className,\n      )}\n      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}\n    >\n      <path\n        d={pathD}\n        stroke={pathColor}\n        strokeWidth={pathWidth}\n        strokeOpacity={pathOpacity}\n        strokeLinecap=\"round\"\n      />\n      <path\n        d={pathD}\n        strokeWidth={pathWidth}\n        stroke={`url(#${id})`}\n        strokeOpacity=\"1\"\n        strokeLinecap=\"round\"\n      />\n      <defs>\n        <motion.linearGradient\n          className=\"transform-gpu\"\n          id={id}\n          gradientUnits={\"userSpaceOnUse\"}\n          initial={{\n            x1: \"0%\",\n            x2: \"0%\",\n            y1: \"0%\",\n            y2: \"0%\",\n          }}\n          animate={{\n            x1: gradientCoordinates.x1,\n            x2: gradientCoordinates.x2,\n            y1: gradientCoordinates.y1,\n            y2: gradientCoordinates.y2,\n          }}\n          transition={{\n            delay,\n            duration,\n            ease: [0.16, 1, 0.3, 1], // https://easings.net/#easeOutExpo\n            repeat: Infinity,\n            repeatDelay: 0,\n          }}\n        >\n          <stop stopColor={gradientStartColor} stopOpacity=\"0\"></stop>\n          <stop stopColor={gradientStartColor}></stop>\n          <stop offset=\"32.5%\" stopColor={gradientStopColor}></stop>\n          <stop\n            offset=\"100%\"\n            stopColor={gradientStopColor}\n            stopOpacity=\"0\"\n          ></stop>\n        </motion.linearGradient>\n      </defs>\n    </svg>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/magicui/animated-beam.tsx"
    }
  ]
}