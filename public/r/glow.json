{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glow",
  "type": "registry:ui",
  "title": "Glow",
  "description": "A beautiful glow effect that appears when hovering over elements",
  "files": [
    {
      "path": "registry/magicui/glow.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  ComponentPropsWithoutRef,\r\n  CSSProperties,\r\n  MouseEvent,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n\r\ninterface GlowAreaProps extends ComponentPropsWithoutRef<'div'> {\r\n  /**\r\n   * @default 50\r\n   * @type number\r\n   * @description\r\n   * The size of the glow area\r\n   * */\r\n  size?: number;\r\n}\r\n\r\nexport const GlowArea: React.FC<GlowAreaProps> = (props) => {\r\n\r\n  const { className, size = 50, ...rest } = props\r\n  const element = useRef<HTMLDivElement | null>(null);\r\n  const latestCoords = useRef<{ x: number, y: number } | null>(null);\r\n  const frameId = useRef<number | null>(null)\r\n\r\n  const animateGlow = () => {\r\n    if (latestCoords.current && element.current) {\r\n      element.current.style.setProperty('--glow-x', `${latestCoords.current.x}px`)\r\n      element.current.style.setProperty('--glow-y', `${latestCoords.current.y}px`)\r\n\r\n      frameId.current = null\r\n    }\r\n  }\r\n\r\n\r\n  const handleMouseMove = (e: MouseEvent<HTMLDivElement>) => {\r\n    const bounds = e.currentTarget.getBoundingClientRect()\r\n    latestCoords.current = {\r\n      x: e.clientX - bounds.left,\r\n      y: e.clientY - bounds.top\r\n    }\r\n    console.log(latestCoords.current)\r\n\r\n    if (!frameId.current) {\r\n      frameId.current = requestAnimationFrame(() => animateGlow())\r\n    }\r\n  }\r\n\r\n  const handleMouseLeave = (e: MouseEvent<HTMLDivElement>) => {\r\n    e.currentTarget.style.removeProperty('--glow-x')\r\n    e.currentTarget.style.removeProperty('--glow-y')\r\n  }\r\n  \r\n  return (\r\n    <div\r\n      className={cn(\"relative\", className)}\r\n      ref={element}\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseMove={handleMouseMove}\r\n      style={{\r\n        '--glow-size': `${size}px`,\r\n      } as CSSProperties}\r\n      {...rest} />\r\n  );\r\n};\r\n\r\nGlowArea.displayName = \"GlowArea\"\r\n\r\ninterface GlowProps extends ComponentPropsWithoutRef<'div'> {\r\n  /**\r\n   * @default \"purple\"\r\n   * @type string\r\n   * @description\r\n   * The color of the glow\r\n   * */\r\n  color?: string;\r\n}\r\n\r\nexport const Glow: React.FC<GlowProps> = (props) => {\r\n  const { className, color = \"purple\", children, ...rest } = props\r\n\r\n  const element = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    element.current?.style.setProperty(\"--glow-top\", `${element.current.offsetTop}px`)\r\n    element.current?.style.setProperty(\"--glow-left\", `${element.current.offsetLeft}px`)\r\n  }, [])\r\n\r\n  return (\r\n    <div ref={element} className={cn(className, \"relative\")}>\r\n      <div\r\n\r\n        style={{\r\n          backgroundImage: `radial-gradient(\r\n            var(--glow-size) var(--glow-size) at \r\n            calc(var(--glow-x, -99999px) - var(--glow-left, 0px)) \r\n            calc(var(--glow-y, -99999px) - var(--glow-top, 0px)),\r\n            ${color} 0%,\r\n            transparent 100%\r\n          )`\r\n        }}\r\n\r\n        className={cn(className, \"absolute pointer-events-none inset-0 transition-all mix-blend-multiply dark:mix-blend-lighten after:content-[''] after:absolute after:bg-background/80 after:inset-[0.1rem] after:rounded-[inherit]\")}>\r\n      </div>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nGlow.displayName = \"Glow\"\r\n",
      "type": "registry:ui",
      "target": "components/magicui/glow.tsx"
    }
  ]
}